package com.gunjany.echomusic.Fragments

import android.annotation.SuppressLint
import android.app.Activity
import android.content.Context
import android.media.MediaPlayer
import android.os.Bundle
import android.provider.MediaStore
import android.support.design.R.id.container
import android.support.v4.app.Fragment
import android.support.v7.widget.DefaultItemAnimator
import android.support.v7.widget.LinearLayoutManager
import android.support.v7.widget.RecyclerView
import android.view.*
import android.widget.ImageButton
import android.widget.LinearLayout
import android.widget.RelativeLayout
import android.widget.TextView
import com.gunjany.echomusic.Adaptors.MainScreenAdapter
import com.gunjany.echomusic.R
import com.gunjany.echomusic.Songs
import java.util.*

/**
 * A simple [Fragment] subclass for displaying the songs on the main screen. Here we will
inflate our recycler view with the data of the songs on our phone.
 */
class MainScreenFragment : Fragment() {

    object Statified {
        var mediaPLayer: MediaPlayer? = null
    }

    /*Let's see the usage of every variable declared here*/
    /*The arraylist is used for storing the songs along with the data associated with it*/
    var getSongsList: ArrayList<Songs>? = null
    /*The now playing bar at the bottom with basic play pause functionality*/
    var nowPlayingBottomBar: RelativeLayout? = null
    /*Play/pause button in bottom bar*/
    var playPauseButton: ImageButton? = null
    /*Variable which stores the song title*/
    var songTitle: TextView? = null
    /*The layout which is used to display the songs and the bottom bar*/
    var visibleLayout: RelativeLayout? = null
    /*The layout used to display the no songs present message to user when there are no
   songs present*/
    var noSongs: RelativeLayout? = null
    /*Recycler view i.e. the list which is used for displaying the songs*/
    var recyclerView: RecyclerView? = null
    /*The variable used to store the context of the activity*/
    var myActivity: Activity? = null
    /*The variable used for main screen adapter in order to link the adapter with the
   recycler view*/
    var _mainScreenAdapter: MainScreenAdapter? = null
    /*This method is called after the onCreateView() method when the fragment's activity
   has been created and the view has been instantiated
    * It is used to do the final initialization once the other things are in place*/
    var trackPosition: Int = 0

    override fun onActivityCreated(savedInstanceState: Bundle?) {
        super.onActivityCreated(savedInstanceState)


        /*The variable getSongsList() is used to get store the arrayList returned by the
       function getSongsFromPhone()*/
        getSongsList = getSongsFromPhone()
        /*Here we initialize the main screen adapter and pass it the required parameters
       i.e. the list of songs and the context*/

        val prefs = activity?.getSharedPreferences("action_sort", Context.MODE_PRIVATE)
        val action_sort_ascending = prefs?.getString("action_sort_ascending", true.toString())
        val action_sort_recent = prefs?.getString("action_sort_recent", false.toString())

        _mainScreenAdapter = MainScreenAdapter(getSongsList as ArrayList<Songs>, myActivity
                as Context)
        /*The layout manager defines the way a view will be set in the recycler view
        * There are different types of layout managers e.g. Linear, Grid, Staggered grid
        * Here we are using the Linear layout manager which aligns the objects in a linear
       way one under the other*/
        val mLayoutManager = LinearLayoutManager(myActivity)
        /*Here we put assign our layout manager to the recycler view's layout manager*/
        recyclerView?.layoutManager = mLayoutManager
        /*It is similar to the item animator we used in the navigation drawer*/
        recyclerView?.itemAnimator = DefaultItemAnimator()
        /*Finally we set the adapter to the recycler view*/
        recyclerView?.adapter = _mainScreenAdapter

        if (getSongsList == null) {
            visibleLayout?.visibility = View.INVISIBLE
            noSongs?.visibility = View.VISIBLE
        } else {
            if (action_sort_ascending!!.equals(true.toString(), true)) {
                Collections.sort(getSongsList, Songs.Statified.nameComparater)
                _mainScreenAdapter?.notifyDataSetChanged()
            } else if (action_sort_recent!!.equals(true.toString(), true)) {
                Collections.sort(getSongsList, Songs.Statified.dateComparater)
                _mainScreenAdapter?.notifyDataSetChanged()
            }
        }


        bottomBarSetup()
    }


    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
                              savedInstanceState: Bundle?): View? {

        /*This is used to tell the activity that the fragment has a menu*/
        setHasOptionsMenu(true)
        activity?.title = "Songs"

        // Inflating the layout for this fragment

        val view = inflater.inflate(R.layout.fragment_main_screen, container, false)

        visibleLayout = view?.findViewById(R.id.visible_Layout)
        noSongs = view?.findViewById(R.id.NoSongs)
        nowPlayingBottomBar = view?.findViewById(R.id.hidden_bar_mainScreen)
        songTitle = view?.findViewById(R.id.SongTitleMainScreen)
        playPauseButton = view?.findViewById(R.id.playPauseButton)
        recyclerView = view?.findViewById(R.id.content_Main)
        /*Here the view returned is inflated on the screen and is visible to the user*/
        return view
    }

    /*Called when the fragment is first attached to its context*/
    override fun onAttach(context: Context?) {
        super.onAttach(context)
        /*Here we assign our myActivity variable the value of the context of the activity
       in which the fragment resides*/
        myActivity = context as Activity
    }

    /*Called when the fragment was first attached to its activity. This method was
   deprecated which means that now it is no longer user.
    * The above method is also the same, but we still use it sometimes as to prevent some
   crashes on some older devices*/
    override fun onAttach(activity: Activity?) {
        super.onAttach(activity)
        myActivity = activity
    }

    @SuppressLint("Recycle")
/*As the name suggests, this function is used to fetch the songs present in your phones
   and returns the arraylist of the same*/
    fun getSongsFromPhone(): ArrayList<Songs> {
        var arrayList = ArrayList<Songs>()
        /*A content resolver is used to access the data present in your phone
        * In this case it is used for obtaining the songs present your phone*/
        var contentResolver = myActivity?.contentResolver
        /*Here we are accessing the Media class of Audio class which in turn a class of
       Media Store, which contains information about all the media files present
        * on our mobile device*/
        var songUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI
        /*Here we make the request of songs to the content resolver to get the music files
       from our device*/
        var songCursor = contentResolver?.query(songUri, null, null, null, null)
        /*In the if condition we check whether the number of music files are null or not.
       The moveToFirst() function returns the first row of the results*/
        if (songCursor != null && songCursor.moveToFirst()) {
            val songId = songCursor.getColumnIndex(MediaStore.Audio.Media._ID)
            val songTitle = songCursor.getColumnIndex(MediaStore.Audio.Media.TITLE)
            val songArtist = songCursor.getColumnIndex(MediaStore.Audio.Media.ARTIST)
            val songData = songCursor.getColumnIndex(MediaStore.Audio.Media.DATA)
            val dateIndex = songCursor.getColumnIndex(MediaStore.Audio.Media.DATE_ADDED)
            /*moveToNext() returns the next row of the results. It returns null if there
           is no row after the current row*/
            while (songCursor.moveToNext()) {
                var currentId = songCursor.getLong(songId)
                var currentTitle = songCursor.getString(songTitle)
                var currentArtist = songCursor.getString(songArtist)
                var currentData = songCursor.getString(songData)
                var currentDate = songCursor.getLong(dateIndex)
                /*Adding the fetched songs to the arraylist*/
                arrayList.add(Songs(currentId, currentTitle, currentArtist, currentData,
                        currentDate))
            }
        }
        /*Returning the arraylist of songs*/
        return arrayList
    }

    fun bottomBarSetup() {

        try {

            bottomBarClickHandler()
            songTitle?.text = SongPlayingFragment.Statified.currentSongHelper?.songTitle
            SongPlayingFragment.Statified?.mediaPlayer?.setOnCompletionListener {
                songTitle?.text = SongPlayingFragment.Statified.currentSongHelper?.songTitle
                SongPlayingFragment.Staticated.onSongComplete()
            }
            if (SongPlayingFragment.Statified.mediaPlayer?.isPlaying as Boolean) {
                nowPlayingBottomBar?.visibility = View.VISIBLE
            } else {
                nowPlayingBottomBar?.visibility = View.INVISIBLE
            }

        } catch (e: Exception) {
            e.printStackTrace()
        }
    }

    fun bottomBarClickHandler() {
        nowPlayingBottomBar?.setOnClickListener {
            MainScreenFragment.Statified.mediaPLayer = SongPlayingFragment.Statified.mediaPlayer
            val songPlayingFragment = SongPlayingFragment()
            val args = Bundle()
            args.putString("songArtist", SongPlayingFragment.Statified.currentSongHelper?.songArtist)
            args.putString("path", SongPlayingFragment.Statified.currentSongHelper?.songPath)
            args.putString("songTitle", SongPlayingFragment.Statified.currentSongHelper?.songTitle)
            args.putInt("songId", SongPlayingFragment.Statified.currentSongHelper?.songId?.toInt() as Int)
            args.putInt("songPosition", SongPlayingFragment.Statified.currentSongHelper?.currentPosition as Int)
            args.putParcelableArrayList("songData", SongPlayingFragment.Statified.fetchSongs)
            args.putString("MainBottomBar", "success")
            songPlayingFragment.arguments = args
            fragmentManager?.beginTransaction()
                    ?.replace(R.id.details_fragments, songPlayingFragment)
                    ?.addToBackStack("SongPlayingFragment")
                    ?.commit()
        }
        playPauseButton?.setOnClickListener {
            if (SongPlayingFragment.Statified.mediaPlayer?.isPlaying as Boolean) {
                SongPlayingFragment.Statified.mediaPlayer?.pause()
                trackPosition = SongPlayingFragment.Statified.mediaPlayer?.currentPosition as Int
                playPauseButton?.setBackgroundResource(R.drawable.play_icon)
            } else {
                SongPlayingFragment.Statified.mediaPlayer?.seekTo(trackPosition)
                SongPlayingFragment.Statified.mediaPlayer?.start()
                playPauseButton?.setBackgroundResource(R.drawable.pause_icon)
            }
        }
    }

    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater?) {

        menu.clear()
        inflater?.inflate(R.menu.main, menu)
        return
    }

    override fun onOptionsItemSelected(item: MenuItem?): Boolean {

        val switcher = item?.itemId
        if (switcher == R.id.action_sort_ascending) {

            val editor = activity?.getSharedPreferences("action_sort", Context.MODE_PRIVATE)?.edit()
            editor?.putString("action_sort_ascending", true.toString())
            editor?.putString("action_sort_recent", false.toString())
            editor?.apply()

            if (getSongsList != null) {

                Collections.sort(getSongsList, Songs.Statified.nameComparater)
            }

            _mainScreenAdapter?.notifyDataSetChanged()

        } else if (switcher == R.id.action_sort_recent) {

            val editor = activity?.getSharedPreferences("action_sort", Context.MODE_PRIVATE)?.edit()
            editor?.putString("action_sort_ascending", false.toString())
            editor?.putString("action_sort_recent", true.toString())
            editor?.apply()

            if (getSongsList != null) {

                Collections.sort(getSongsList, Songs.Statified.dateComparater)
            }

            _mainScreenAdapter?.notifyDataSetChanged()
            return false
        }
        return super.onOptionsItemSelected(item)
    }
}
