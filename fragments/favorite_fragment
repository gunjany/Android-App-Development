package com.gunjany.echomusic.Fragments


import android.annotation.SuppressLint
import android.app.Activity
import android.content.Context
import android.media.Image
import android.media.MediaPlayer
import android.os.Build
import android.os.Bundle
import android.provider.MediaStore
import android.support.annotation.RequiresApi
import android.support.v4.app.Fragment
import android.support.v7.widget.DefaultItemAnimator
import android.support.v7.widget.LinearLayoutManager
import android.support.v7.widget.RecyclerView
import android.view.LayoutInflater
import android.view.Menu
import android.view.View
import android.view.ViewGroup
import android.widget.ImageButton
import android.widget.RelativeLayout
import android.widget.TextView
import com.gunjany.echomusic.Adaptors.FavoriteAdapter
import com.gunjany.echomusic.R
import com.gunjany.echomusic.Songs
import com.gunjany.echomusic.database.EchoDatabase

@Suppress("NAME_SHADOWING", "IMPLICIT_BOXING_IN_IDENTITY_EQUALS")
/**
 * A simple [Fragment] subclass.
 *
 */
class FavoriteFragment : Fragment() {

    object Statified {
        var mediaPlayer: MediaPlayer? = null
    }

    var myActivity: Activity? = null

    var noFavorite: TextView? = null
    var nowPlayingButtonBar: RelativeLayout? = null
    var playPauseButton: ImageButton? = null
    var songTitle: TextView? = null
    var recyclerView: RecyclerView? = null
    var trackPosition: Int = 0
    var favoriteContent: EchoDatabase? = null

    var refreshList: ArrayList<Songs>? = null
    var getListFromDatabase: ArrayList<Songs>? = null

    // var _favoriteAdaptor: FavoriteAdapter?= null


    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
                              savedInstanceState: Bundle?): View? {
        // Inflate the layout for this fragment
        val view = inflater.inflate(R.layout.fragment_favorite, container, false)
        activity?.title = "Favorites"

        setHasOptionsMenu(false)

        noFavorite = view?.findViewById(R.id.noFavorites)
        nowPlayingButtonBar = view?.findViewById(R.id.hidden_bar_favScreen)
        playPauseButton = view?.findViewById(R.id.playPauseButton)
        songTitle = view?.findViewById(R.id.SongTitleFavScreen)
        recyclerView = view?.findViewById(R.id.favoriteRecycler)
        return view
    }

    override fun onAttach(context: Context?) {
        super.onAttach(context)
        myActivity = context as Activity
    }

    override fun onAttach(activity: Activity?) {
        super.onAttach(activity)
        myActivity = activity
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setHasOptionsMenu(false)
    }

    @RequiresApi(Build.VERSION_CODES.JELLY_BEAN)
    override fun onActivityCreated(savedInstanceState: Bundle?) {
        super.onActivityCreated(savedInstanceState)



        favoriteContent = EchoDatabase(myActivity)
        display_favorites_by_searching()
        bottomBarSetup()


    }

    override fun onResume() {
        super.onResume()
    }

    override fun onPrepareOptionsMenu(menu: Menu?) {
        super.onPrepareOptionsMenu(menu)
        val item = menu?.findItem(R.id.action_sort)
        item?.isVisible = false
    }

    @SuppressLint("Recycle")
    fun getSongsFromPhone(): ArrayList<Songs> {
        var arrayList = ArrayList<Songs>()
        /*A content resolver is used to access the data present in your phone
        * In this case it is used for obtaining the songs present your phone*/
        var contentResolver = myActivity?.contentResolver
        /*Here we are accessing the Media class of Audio class which in turn a class of
       Media Store, which contains information about all the media files present
        * on our mobile device*/
        var songUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI
        /*Here we make the request of songs to the content resolver to get the music files
       from our device*/
        var songCursor = contentResolver?.query(songUri, null, null, null, null)
        /*In the if condition we check whether the number of music files are null or not.
       The moveToFirst() function returns the first row of the results*/
        if (songCursor != null && songCursor.moveToFirst()) {
            val songId = songCursor.getColumnIndex(MediaStore.Audio.Media._ID)
            val songTitle = songCursor.getColumnIndex(MediaStore.Audio.Media.TITLE)
            val songArtist = songCursor.getColumnIndex(MediaStore.Audio.Media.ARTIST)
            val songData = songCursor.getColumnIndex(MediaStore.Audio.Media.DATA)
            val dateIndex = songCursor.getColumnIndex(MediaStore.Audio.Media.DATE_ADDED)
            /*moveToNext() returns the next row of the results. It returns null if there
           is no row after the current row*/
            while (songCursor.moveToNext()) {
                var currentId = songCursor.getLong(songId)
                var currentTitle = songCursor.getString(songTitle)
                var currentArtist = songCursor.getString(songArtist)
                var currentData = songCursor.getString(songData)
                var currentDate = songCursor.getLong(dateIndex)
                /*Adding the fetched songs to the arraylist*/
                arrayList.add(Songs(currentId, currentTitle, currentArtist, currentData,
                        currentDate))
            }
        }
        /*Returning the arraylist of songs*/
        return arrayList
    }

    fun bottomBarSetup() {

        try {

            bottomBarClickHandler()

            songTitle?.text = SongPlayingFragment.Statified.currentSongHelper?.songTitle

            SongPlayingFragment.Statified?.mediaPlayer?.setOnCompletionListener {
                songTitle?.text = SongPlayingFragment.Statified.currentSongHelper?.songTitle
                SongPlayingFragment.Staticated.onSongComplete()
            }
            if (SongPlayingFragment.Statified.mediaPlayer?.isPlaying as Boolean) {
                nowPlayingButtonBar?.visibility = View.VISIBLE
            } else {
                nowPlayingButtonBar?.visibility = View.INVISIBLE
            }

        } catch (e: Exception) {
            e.printStackTrace()
        }
    }

    fun bottomBarClickHandler() {
        nowPlayingButtonBar?.setOnClickListener {
            Statified.mediaPlayer = SongPlayingFragment.Statified.mediaPlayer
            val songPlayingFragment = SongPlayingFragment()
            var args = Bundle()
            args.putString("songArtist", SongPlayingFragment.Statified.currentSongHelper?.songArtist)
            args.putString("path", SongPlayingFragment.Statified.currentSongHelper?.songPath)
            args.putString("songTitle", SongPlayingFragment.Statified.currentSongHelper?.songTitle)
            args.putInt("songId", SongPlayingFragment.Statified.currentSongHelper?.songId?.toInt() as Int)
            args.putInt("songPosition", SongPlayingFragment.Statified.currentSongHelper?.currentPosition as Int)
            args.putParcelableArrayList("songData", SongPlayingFragment.Statified.fetchSongs)
            args.putString("FavBottomBar", "success")
            songPlayingFragment.arguments = args
            fragmentManager?.beginTransaction()
                    ?.replace(R.id.details_fragments, songPlayingFragment)
                    ?.addToBackStack("SongPlayingFragment")
                    ?.commit()
        }
        playPauseButton?.setOnClickListener {
            if (SongPlayingFragment.Statified.mediaPlayer?.isPlaying as Boolean) {
                SongPlayingFragment.Statified.mediaPlayer?.pause()
                trackPosition = SongPlayingFragment.Statified.mediaPlayer?.currentPosition as Int
                playPauseButton?.setBackgroundResource(R.drawable.play_icon)
            } else {
                SongPlayingFragment.Statified.mediaPlayer?.seekTo(trackPosition)
                SongPlayingFragment.Statified.mediaPlayer?.start()
                playPauseButton?.setBackgroundResource(R.drawable.pause_icon)
            }
        }

    }

    @RequiresApi(Build.VERSION_CODES.JELLY_BEAN)
/*The below function is used to search the favorites and display*/
    fun display_favorites_by_searching() {
/*Checking if database has any entry or not*/
        try {
            /* if (favoriteContent?.checkifIdExists() as Boolean){
                 //do nothing
             }*/
            if (favoriteContent?.checkSize() as Int > 0) {
                /*New list for storing the favorites*/
                refreshList = ArrayList<Songs>()
                /*Getting the list of songs from database*/
                getListFromDatabase = favoriteContent?.queryDBList()

                // _favoriteAdaptor = FavoriteAdapter(getListFromDatabase as ArrayList<Songs>, myActivity as Context)

                /* val mLayoutManager = LinearLayoutManager(myActivity)
                 /*Here we put assign our layout manager to the recycler view's layout manager*/
                 recyclerView?.layoutManager = mLayoutManager
                 /*It is similar to the item animator we used in the navigation drawer*/
                 recyclerView?.itemAnimator = DefaultItemAnimator()
                 /*Finally we set the adapter to the recycler view*/
                 recyclerView?.adapter = _favoriteAdaptor*/
                /*Getting list of songs from phone storage*/

                val fetchListfromDevice = getSongsFromPhone()
                /*If there are no songs in phone then there cannot be any favorites*/
                if (fetchListfromDevice != null) {
                    /*Then we check all the songs in the phone*/
                    for (i in 0 until fetchListfromDevice.size - 1) {
                        /*We iterate through every song in database*/
                        for (j in 0 until getListFromDatabase?.size as Int - 1) {
                            /*While iterating through all the songs we check for the songs
                                which are in both the lists * i.e. the favorites songs*/
                            if (getListFromDatabase?.get(j)?.songID ===
                                    fetchListfromDevice[i].songID) {
                                /*on getting the favorite songs we add them to the refresh
                                                list*/
                                refreshList?.add((getListFromDatabase as ArrayList<Songs>)[j])
                            }
                        }
                    }
                }

                /*If refresh list is null we display that there are no favorites*/
                if (refreshList == null) {
                    recyclerView?.visibility = View.INVISIBLE
                    noFavorite?.visibility = View.VISIBLE
                } else {
/*Else we setup our recycler view for displaying the favorite songs*/
                    var favoriteAdapter = FavoriteAdapter(refreshList as ArrayList<Songs>,
                            myActivity as Context)
                    val mLayoutManager = LinearLayoutManager(activity)
                    recyclerView?.layoutManager = mLayoutManager
                    recyclerView?.itemAnimator = DefaultItemAnimator()
                    recyclerView?.adapter = favoriteAdapter
                    recyclerView?.setHasFixedSize(true)
                }
            } else {
/*If initially the checkSize() function returned 0 then also we display the no
favorites present message*/
                recyclerView?.visibility = View.INVISIBLE
                noFavorite?.visibility = View.VISIBLE
            }
        } catch (e: Exception) {
            e.printStackTrace()
        }

    }
}
