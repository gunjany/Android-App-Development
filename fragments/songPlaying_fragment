package com.gunjany.echomusic.Fragments


import android.annotation.SuppressLint
import android.app.Activity
import android.content.Context
import android.content.SharedPreferences
import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import android.media.AudioManager
import android.media.MediaPlayer
import android.net.Uri
import android.os.Bundle
import android.os.Handler
import android.os.Parcel
import android.os.Parcelable
import android.support.v4.app.Fragment
import android.support.v4.content.ContextCompat
import android.view.*
import android.view.textservice.TextServicesManager
import android.widget.ImageButton
import android.widget.SeekBar
import android.widget.TextView
import android.widget.Toast
import com.cleveroad.audiovisualization.AudioVisualization
import com.cleveroad.audiovisualization.DbmHandler
import com.cleveroad.audiovisualization.DbmHandler.*
import com.cleveroad.audiovisualization.DbmHandler.Factory.*
import com.cleveroad.audiovisualization.GLAudioVisualizationView
import com.cleveroad.audiovisualization.VisualizerDbmHandler
import com.gunjany.echomusic.CurrentSongHelper
import com.gunjany.echomusic.R
import com.gunjany.echomusic.Songs
import com.gunjany.echomusic.database.EchoDatabase
import java.util.*
import java.util.concurrent.TimeUnit
import javax.microedition.khronos.opengles.GL
import kotlin.math.E


/*//
// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
private const val ARG_PARAM1 = "param1"
private const val ARG_PARAM2 = "param2"

/**
 * A simple [Fragment] subclass.
 *
 */*/
class SongPlayingFragment : Fragment() {

    @SuppressLint("StaticFieldLeak")
    object Statified {
        var myActivity: Activity? = null
        var mediaPlayer: MediaPlayer? = null
        var startTimeText: TextView? = null
        var endTimeText: TextView? = null
        var playPauseImageBtn: ImageButton? = null
        var previousImageBtn: ImageButton? = null
        var nextImageBtn: ImageButton? = null
        var loopImageButton: ImageButton? = null
        var seekbar: SeekBar? = null
        var songTitleView: TextView? = null
        var songArtistView: TextView? = null
        var shuffleImageButton: ImageButton? = null

        var currentSongHelper: CurrentSongHelper? = null
        var currentPosition: Int = 0
        var fetchSongs: ArrayList<Songs>? = null

        var audioVisualisation: AudioVisualization? = null
        var GLView: GLAudioVisualizationView? = null

        val playNextNormal: String? = "PlayNextNormal"
        val playNextLikeNormalShuffle: String? = "PlayNextLikeNormalShuffle"

        var fab: ImageButton? = null

        var path: String? = null
        var title: String? = null
        var artist: String? = null
        var songID: Long? = null
        var favoriteContent: EchoDatabase? = null

        var updateSongTime = object : Runnable {
            override fun run() {
                val getCurrent = mediaPlayer?.currentPosition
                startTimeText?.text = String.format("%d:%d",
                        TimeUnit.MILLISECONDS.toMinutes(getCurrent?.toLong() as Long),
                        TimeUnit.MILLISECONDS.toSeconds(getCurrent.toLong()) -
                                TimeUnit.MILLISECONDS.toSeconds(TimeUnit.MILLISECONDS.toMinutes(getCurrent.toLong())))

                seekbar?.progress = getCurrent.toInt()
                Handler().postDelayed(this, 1000)
            }

        }

        var mSensorManager: SensorManager? = null
        var mSensorListner: SensorEventListener? = null

        var MY_PREFS_NAME = "ShakeFeature"
    }

    object Staticated {
        var MY_PREF_SHUFFLE = "Shuffle feature"
        var MY_PREF_LOOP = "Loop Feature"

        fun onSongComplete() {
            if (Statified.currentSongHelper?.isShuffle as Boolean) {
                Statified.currentSongHelper?.thisIsPlaying = true
                playNext(Statified.playNextLikeNormalShuffle)

            } else {
                if (Statified.currentSongHelper?.isLoop as Boolean) {

                    Statified.currentSongHelper?.thisIsPlaying = true
                    var nextSong = Statified.fetchSongs?.get(Statified.currentPosition)
                    Statified.currentSongHelper?.songTitle = nextSong?.songTitle
                    Statified.currentSongHelper?.songPath = nextSong?.songData
                    Statified.currentSongHelper?.songId = nextSong?.songID as Long
                    Statified.currentSongHelper?.currentPosition = Statified.currentPosition

                    updateTextViews(Statified.currentSongHelper?.songTitle as String, Statified.currentSongHelper?.songArtist as String)
                    processInformation(Statified.mediaPlayer as MediaPlayer)

                    Statified.mediaPlayer?.reset()
                    try {
                        Statified.mediaPlayer?.setDataSource(Statified.myActivity, Uri.parse(Statified.currentSongHelper?.songPath))
                        Statified.mediaPlayer?.prepare()
                        Statified.mediaPlayer?.start()
                        processInformation(Statified.mediaPlayer as MediaPlayer)
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }

                } else {
                    Statified.currentSongHelper?.thisIsPlaying = true
                    playNext(Statified.playNextNormal)

                }
            }

            if (Statified.favoriteContent?.checkifIdExists(Statified.currentSongHelper?.songId?.toInt() as Int) as Boolean) {
                Statified.fab?.setImageDrawable(ContextCompat.getDrawable(Statified.myActivity!!, R.drawable.favorite_on))
            } else {
                Statified.fab?.setImageDrawable(ContextCompat.getDrawable(Statified.myActivity!!, R.drawable.favorite_off))
            }
        }

        fun updateTextViews(title: String, songArtist: String) {
            var songTitleUpdated = title
            var songArtistUpdated = songArtist
            if (title.equals("<unknown>", true)) {
                songTitleUpdated = "unknown"
            }
            if (songArtist.equals("<unknown>", true)) {
                songArtistUpdated = "unknown"
            }

            Statified.songTitleView?.text = songTitleUpdated
            Statified.songArtistView?.text = songArtistUpdated


        }


        fun processInformation(mediaPlayer: MediaPlayer) {
            val finalTime = mediaPlayer.duration
            val startTime = mediaPlayer.currentPosition
            Statified.seekbar?.max = finalTime

            Statified.startTimeText?.text = String.format("%d: %d",
                    TimeUnit.MILLISECONDS.toMinutes(startTime.toLong()),
                    TimeUnit.MILLISECONDS.toSeconds(startTime.toLong()) -
                            TimeUnit.MILLISECONDS.toSeconds(TimeUnit.MILLISECONDS.toMinutes(startTime.toLong())))
            Statified.endTimeText?.text = String.format("%d: %d",
                    TimeUnit.MILLISECONDS.toMinutes(finalTime.toLong()),
                    TimeUnit.MILLISECONDS.toSeconds(finalTime.toLong()) -
                            TimeUnit.MILLISECONDS.toSeconds(TimeUnit.MILLISECONDS.toMinutes(finalTime.toLong())))
            Statified.seekbar?.progress = startTime
            Handler().postDelayed(Statified.updateSongTime, 1000)
        }


        /*The playNext() function is used to play the next song
    * The playNext() function is called when we tap on the next button*/
        fun playNext(check: String?) {
/*Here we check the value of the string parameter passed*/
            if (check.equals(Statified.playNextNormal, true)) {
/*If the check string was PlayNextNormal, we normally move on to the next
song*/
                Statified.currentPosition = Statified.currentPosition + 1
            } else if (check.equals(Statified.playNextLikeNormalShuffle, true)) {
/*If the check string was PlayNextLikeNormalShuffle, we then randomly select a
song and play it*/
/*The next steps are used to choose the select a random number
* First we declare a variable and then initialize it to a random object*/
                var randomObject = Random()
/*Now here we calculate the random number
* The nextInt(val n: Int) is used to get a random number between 0(inclusive)
and the number passed in this argument(n), exclusive.
* Here we pass the paramter as the length of the list of the songs fetched
* We add 1 to the size as the length will be one more than the size. For
example if the size of arraylist is 10, then it has items from 0 to 10, which gives the
length as 11*/
                var randomPosition = randomObject.nextInt(Statified.fetchSongs?.size?.plus(1) as Int)
/*Now put the current position i.e the position of the song to be played next
equal to the random position*/
                Statified.currentPosition = randomPosition
            } else if (check.equals(Statified.playNextNormal) && Statified.currentSongHelper?.isLoop as Boolean) {
                Statified.currentSongHelper?.currentPosition = Statified.currentPosition

            }
/*Now if the current position equals the length of the i.e the current position
points to the end of the list
* we then make the current position to 0 as no song will be there*/
            if (Statified.currentPosition == Statified.fetchSongs?.size) {
                Statified.currentPosition = 0
            }
            Statified.currentSongHelper?.isLoop = false
/*Here we get the details of the song which is played as the next song
* and update the contents of the current song helper*/
            var nextSong = Statified.fetchSongs?.get(Statified.currentPosition)
            Statified.currentSongHelper?.songPath = nextSong?.songData
            Statified.currentSongHelper?.songTitle = nextSong?.songTitle
            Statified.currentSongHelper?.songArtist = nextSong?.artist
            Statified.currentSongHelper?.songId = nextSong?.songID as Long
/*updating the text views for title and artist name*/
            updateTextViews(Statified.currentSongHelper?.songTitle as String, Statified.currentSongHelper?.songArtist as String)
            processInformation(Statified.mediaPlayer as MediaPlayer)
/*Before playing the song we reset the media player*/
            Statified.mediaPlayer?.reset()
            try {
/*Similar steps which were done when we started the music*/
                Statified.mediaPlayer?.setDataSource(Statified.myActivity, Uri.parse(Statified.currentSongHelper?.songPath))
                Statified.mediaPlayer?.prepare()
                Statified.mediaPlayer?.start()
            } catch (e: Exception) {
                e.printStackTrace()
            }
            if (Statified.favoriteContent?.checkifIdExists(Statified.currentSongHelper?.songId?.toInt() as Int) as Boolean) {
                Statified.fab?.setImageDrawable(ContextCompat.getDrawable(Statified.myActivity!!, R.drawable.favorite_on))
            } else {
                Statified.fab?.setImageDrawable(ContextCompat.getDrawable(Statified.myActivity!!, R.drawable.favorite_off))
            }
        }

    }

    var mAcceleration: Float = 0f
    var mAccelerationCurrent: Float = 0f
    var mAccelerationLast: Float = 0f

    /*@SuppressLint("ValidFragment")
    constructor(parcel: Parcel) : this() {
        currentPosition = parcel.readInt()
    }*/

    @SuppressLint("ResourceType")
    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
                              savedInstanceState: Bundle?): View? {
        /*This is used to tell the activity that the fragment has a menu*/
        setHasOptionsMenu(true)
        activity?.title = "Now Playing"

        // Inflate the layout for this fragment
        val view = inflater.inflate(R.layout.fragment_song_playing, container, false)

        Statified.seekbar = view?.findViewById(R.id.seekBar)
        Statified.startTimeText = view?.findViewById(R.id.startTime)
        Statified.endTimeText = view?.findViewById(R.id.endTime)
        Statified.playPauseImageBtn = view?.findViewById(R.id.playPauseButton)
        Statified.previousImageBtn = view?.findViewById(R.id.previousButton)
        Statified.nextImageBtn = view?.findViewById(R.id.nextButton)
        Statified.loopImageButton = view?.findViewById(R.id.loopButton)
        Statified.songTitleView = view?.findViewById(R.id.songTitle)
        Statified.songArtistView = view?.findViewById(R.id.songArtist)
        Statified.shuffleImageButton = view?.findViewById(R.id.shuffleButton)
        Statified.GLView = view?.findViewById(R.id.visualizer_view)
        Statified.fab = view?.findViewById(R.id.favorite_icon)
        Statified.fab?.alpha = 0.8f

        return view
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        Statified.mSensorManager = Statified.myActivity?.getSystemService(Context.SENSOR_SERVICE) as SensorManager

        mAcceleration = 0.0f
        mAccelerationCurrent = SensorManager.GRAVITY_EARTH
        mAccelerationLast = SensorManager.GRAVITY_EARTH
        bindShakeListener()
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        Statified.audioVisualisation = Statified.GLView as AudioVisualization
    }

    override fun onCreateOptionsMenu(menu: Menu?, inflater: MenuInflater?) {

        menu?.clear()
        inflater?.inflate(R.menu.song_playing_menu, menu)
        super.onCreateOptionsMenu(menu, inflater)
    }

    override fun onPrepareOptionsMenu(menu: Menu?) {
        super.onPrepareOptionsMenu(menu)
        val item: MenuItem? = menu?.findItem(R.id.action_redirected)
        // Statified.myActivity?.onBackPressed()
        item?.isVisible = true
    }

    override fun onOptionsItemSelected(item: MenuItem?): Boolean {
        when (item?.itemId) {
            R.id.action_redirected -> {
                Statified.myActivity?.onBackPressed()
                return false
            }
        }
        return false
    }

    override fun onAttach(context: Context?) {
        super.onAttach(context)
        Statified.myActivity = context as Activity
    }

    override fun onAttach(activity: Activity?) {
        super.onAttach(activity)
        Statified.myActivity = activity
    }

    override fun onActivityCreated(savedInstanceState: Bundle?) {
        super.onActivityCreated(savedInstanceState)

        Statified.favoriteContent = EchoDatabase(Statified.myActivity)
        Statified.currentSongHelper = CurrentSongHelper()
        Statified.currentSongHelper?.thisIsPlaying = true
        Statified.currentSongHelper?.isShuffle = false
        Statified.currentSongHelper?.isLoop = false


        try {

            Statified.path = arguments?.getString("path")
            Statified.title = arguments?.getString("songTitle")
            Statified.artist = arguments?.getString("songArtist")
            Statified.songID = arguments?.getInt("songId")?.toLong()
            Statified.currentPosition = arguments?.getInt("songPosition") as Int
            Statified.fetchSongs = arguments?.getParcelableArrayList("songData")

            Statified.currentSongHelper?.songPath = Statified.path
            Statified.currentSongHelper?.songTitle = Statified.title
            Statified.currentSongHelper?.songArtist = Statified.artist
            Statified.currentSongHelper?.songId = Statified.songID as Long
            Statified.currentSongHelper?.currentPosition = Statified.currentPosition
            Staticated.updateTextViews(Statified.currentSongHelper?.songTitle as String, Statified.currentSongHelper?.songArtist as String)

        } catch (e: Exception) {
            e.printStackTrace()
        }

        var fromFavBottomBar = arguments?.get("FavBottomBar") as? String
        var fromMainBottomBar = arguments?.get("MainBottomBar") as? String

        if (fromFavBottomBar != null) {
            Statified.mediaPlayer = FavoriteFragment.Statified.mediaPlayer
        } else if (fromMainBottomBar != null) {
            Statified.mediaPlayer = MainScreenFragment.Statified.mediaPLayer
        } else {
            Statified.mediaPlayer = MediaPlayer()
            Statified.mediaPlayer?.setAudioStreamType(AudioManager.STREAM_MUSIC)
            try {
                Statified.mediaPlayer?.setDataSource(Statified.myActivity, Uri.parse(Statified.path))
                Statified.mediaPlayer?.prepare()
            } catch (e: Exception) {
                e.printStackTrace()
            }
            Statified.mediaPlayer?.start()
        }

        /*

        else {
            Statified.mediaPlayer = MediaPlayer()
            Statified.mediaPlayer?.setAudioStreamType(AudioManager.STREAM_MUSIC)
            try {
                Statified.mediaPlayer?.setDataSource(Statified.myActivity, Uri.parse(Statified.path))
                Statified.mediaPlayer?.prepare()
            } catch (e: Exception) {
                e.printStackTrace()
            }
            Statified.mediaPlayer?.start()
        }*/

        Staticated.processInformation(Statified.mediaPlayer as MediaPlayer)
        if (Statified.currentSongHelper?.thisIsPlaying as Boolean) {
            Statified.playPauseImageBtn?.setBackgroundResource(R.drawable.pause_icon)
        } else {
            Statified.playPauseImageBtn?.setBackgroundResource(R.drawable.play_icon)
        }

        Statified.mediaPlayer?.setOnCompletionListener {
            Staticated.onSongComplete()
        }

        /*if (Statified.mediaPlayer?.isPlaying as Boolean){
            Statified.mediaPlayer?.pause()
        }else
        {
            Statified.mediaPlayer?.start()
        }*/
        clickHandler()

        var visualizationHandler = newVisualizerHandler(Statified.myActivity as Context, 0)
        Statified.audioVisualisation?.linkTo(visualizationHandler)

        var prefsForShuffle = Statified.myActivity?.getSharedPreferences(Staticated.MY_PREF_SHUFFLE, Context.MODE_PRIVATE)
        var isShuffledAllowed = prefsForShuffle?.getBoolean("feature", false)
        if (isShuffledAllowed as Boolean) {
            Statified.currentSongHelper?.isShuffle = true
            Statified.currentSongHelper?.isLoop = false
            Statified.shuffleImageButton?.setBackgroundResource(R.drawable.shuffle_icon)
            Statified.loopImageButton?.setBackgroundResource(R.drawable.loop_white_icon)
        } else {
            Statified.currentSongHelper?.isShuffle = false
            Statified.shuffleImageButton?.setBackgroundResource(R.drawable.shuffle_white_icon)
        }

        var prefsForLoop = Statified.myActivity?.getSharedPreferences(Staticated.MY_PREF_SHUFFLE, Context.MODE_PRIVATE)
        var isLoopAllowed = prefsForLoop?.getBoolean("feature", false)
        if (isLoopAllowed as Boolean) {
            Statified.currentSongHelper?.isShuffle = false
            Statified.currentSongHelper?.isLoop = true
            Statified.shuffleImageButton?.setBackgroundResource(R.drawable.shuffle_white_icon)
            Statified.loopImageButton?.setBackgroundResource(R.drawable.loop_icon)
        } else {
            Statified.currentSongHelper?.isLoop = false
            Statified.loopImageButton?.setBackgroundResource(R.drawable.loop_white_icon)
        }

        if (Statified.favoriteContent?.checkifIdExists(Statified.currentSongHelper?.songId?.toInt() as Int) as Boolean) {
            Statified.fab?.setImageDrawable(ContextCompat.getDrawable(Statified.myActivity!!, R.drawable.favorite_on))
        } else {
            Statified.fab?.setImageDrawable(ContextCompat.getDrawable(Statified.myActivity!!, R.drawable.favorite_off))
        }
    }

    override fun onResume() {
        super.onResume()
        Statified.audioVisualisation?.onResume()

        Statified.mSensorManager?.registerListener(Statified.mSensorListner,
                Statified.mSensorManager?.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),
                SensorManager.SENSOR_DELAY_NORMAL)
    }

    override fun onPause() {
        super.onPause()
        Statified.audioVisualisation?.onPause()

        Statified.mSensorManager?.unregisterListener(Statified.mSensorListner)
    }

    override fun onDestroyView() {
        super.onDestroyView()
        Statified.audioVisualisation?.release()
    }

    private fun clickHandler() {

        Statified.fab?.setOnClickListener {
            if (Statified.favoriteContent?.checkifIdExists(Statified.currentSongHelper?.songId?.toInt() as Int) as Boolean) {
                Statified.fab?.setImageDrawable(ContextCompat.getDrawable(Statified.myActivity!!, R.drawable.favorite_off))
                Statified.favoriteContent?.deleteFavorite(Statified.currentSongHelper?.songId?.toInt() as Int)
                Toast.makeText(Statified.myActivity, "Removed from the favorites", Toast.LENGTH_SHORT).show()
            } else {
                Statified.fab?.setImageDrawable(ContextCompat.getDrawable(Statified.myActivity!!, R.drawable.favorite_on))
                Statified.favoriteContent?.saveAsFavorite(Statified.currentSongHelper?.songId?.toInt() as Int,
                        Statified.currentSongHelper?.songArtist, Statified.currentSongHelper?.songTitle, Statified.currentSongHelper?.songPath)
                Toast.makeText(Statified.myActivity, "Added to favorites!", Toast.LENGTH_SHORT).show()
            }
        }

        Statified.shuffleImageButton?.setOnClickListener {

            var editorShuffle = Statified.myActivity?.getSharedPreferences(Staticated.MY_PREF_SHUFFLE, Context.MODE_PRIVATE)?.edit()
            var editorLoop = Statified.myActivity?.getSharedPreferences(Staticated.MY_PREF_LOOP, Context.MODE_PRIVATE)?.edit()
            if (Statified.currentSongHelper?.isShuffle as Boolean) {
                Statified.shuffleImageButton?.setBackgroundResource(R.drawable.shuffle_white_icon)
                Statified.currentSongHelper?.isShuffle = false
                editorShuffle?.putBoolean("feature", false)
                editorShuffle?.apply()
            } else {
                Statified.currentSongHelper?.isShuffle = true
                Statified.currentSongHelper?.isLoop = false
                Statified.shuffleImageButton?.setBackgroundResource(R.drawable.shuffle_icon)
                Statified.loopImageButton?.setBackgroundResource(R.drawable.loop_white_icon)
                editorShuffle?.putBoolean("feature", true)
                editorShuffle?.apply()
                editorLoop?.putBoolean("feature", false)
                editorLoop?.apply()
            }
        }

        /*Here we set the click listener to the next button*/
        Statified.nextImageBtn?.setOnClickListener {
            /*We set the player to be playing by setting isPlaying to be true*/
            Statified.currentSongHelper?.thisIsPlaying = true
            Statified.playPauseImageBtn?.setBackgroundResource(R.drawable.pause_icon)
/*First we check if the shuffle button was enabled or not*/
            if (Statified.currentSongHelper?.isShuffle as Boolean) {
/*If yes, then we play next song randomly
* The check string is passed as the PlayNextLikeNormalShuffle which plays
the random next song*/
                Staticated.playNext(Statified.playNextLikeNormalShuffle)
            } else {
/*If shuffle was not enabled then we normally play the next song
* The check string passed is the PlayNextNormal which serves the purpose*/
                Staticated.playNext(Statified.playNextNormal)
            }
        }
/*Here we set the click listener to the next button*/
        Statified.previousImageBtn?.setOnClickListener {
            /*We set the player to be playing by setting isPlaying to be true*/
            Statified.currentSongHelper?.thisIsPlaying = true
/*First we check if the loop is on or not*/
            if (Statified.currentSongHelper?.isLoop as Boolean) {
/*If the loop was on we turn it off*/
                Statified.loopImageButton?.setBackgroundResource(R.drawable.loop_white_icon)
            }
/*After all of the above is done we then play the previous song using the
playPrevious() function*/
            playPrevious()
        }



        Statified.loopImageButton?.setOnClickListener {
            var editorShuffle = Statified.myActivity?.getSharedPreferences(Staticated.MY_PREF_SHUFFLE, Context.MODE_PRIVATE)?.edit()
            var editorLoop = Statified.myActivity?.getSharedPreferences(Staticated.MY_PREF_LOOP, Context.MODE_PRIVATE)?.edit()
            if (Statified.currentSongHelper?.isLoop as Boolean) {
                Statified.currentSongHelper?.isLoop = false
                Statified.loopImageButton?.setBackgroundResource(R.drawable.loop_white_icon)
                editorLoop?.putBoolean("feature", false)
                editorLoop?.apply()
            } else {
                Statified.currentSongHelper?.isLoop = true
                Statified.currentSongHelper?.isShuffle = false
                Statified.loopImageButton?.setBackgroundResource(R.drawable.loop_icon)
                Statified.shuffleImageButton?.setBackgroundResource(R.drawable.shuffle_white_icon)
                editorLoop?.putBoolean("feature", true)
                editorLoop?.apply()
                editorShuffle?.putBoolean("feature", false)
                editorShuffle?.apply()
            }


        }
        Statified.playPauseImageBtn?.setOnClickListener {
            if (Statified.mediaPlayer?.isPlaying as Boolean) {
                Statified.mediaPlayer?.pause()
                Statified.currentSongHelper?.thisIsPlaying = false
                Statified.playPauseImageBtn?.setBackgroundResource(R.drawable.play_icon)
            } else {
                Statified.mediaPlayer?.start()
                Statified.currentSongHelper?.thisIsPlaying = true
                Statified.playPauseImageBtn?.setBackgroundResource(R.drawable.pause_icon)
            }

        }

        Statified.seekbar?.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {
            }

            override fun onStartTrackingTouch(seekBar: SeekBar?) {
            }

            override fun onStopTrackingTouch(seekBarget: SeekBar?) {
                Statified.seekbar?.progress = Statified.seekbar?.getProgress() as Int
                Statified.mediaPlayer?.seekTo(Statified.seekbar?.getProgress() as Int)
            }
        })

    }


    fun playPrevious() {
/*Decreasing the current position by 1 to get the position of the previous song*/
        Statified.currentPosition = Statified.currentPosition - 1
/*If the current position becomes less than 1, we make it 0 as there is no index as
-1*/
        if (Statified.currentPosition == -1) {
            Statified.currentPosition = 0
        }
        if (Statified.currentSongHelper?.thisIsPlaying as Boolean) {
            Statified.playPauseImageBtn?.setBackgroundResource(R.drawable.pause_icon)
        } else {
            Statified.playPauseImageBtn?.setBackgroundResource(R.drawable.play_icon)
        }
        Statified.currentSongHelper?.isLoop = false
/*Similar to the playNext() function defined above*/
        var nextSong = Statified.fetchSongs?.get(Statified.currentPosition)
        Statified.currentSongHelper?.songPath = nextSong?.songData
        Statified.currentSongHelper?.songTitle = nextSong?.songTitle
        Statified.currentSongHelper?.songArtist = nextSong?.artist
        Statified.currentSongHelper?.songId = nextSong?.songID as Long
/*updating the text views for title and artist name*/
        Staticated.updateTextViews(Statified.currentSongHelper?.songTitle as String,
                Statified.currentSongHelper?.songArtist as String)
        Staticated.processInformation(Statified.mediaPlayer as MediaPlayer)
        Statified.mediaPlayer?.reset()
        try {
            Statified.mediaPlayer?.setDataSource(Statified.myActivity, Uri.parse(Statified.currentSongHelper?.songPath))
            Statified.mediaPlayer?.prepare()
            Statified.mediaPlayer?.start()
        } catch (e: Exception) {
            e.printStackTrace()
        }
        if (Statified.favoriteContent?.checkifIdExists(Statified.currentSongHelper?.songId?.toInt() as Int) as Boolean) {
            Statified.fab?.setImageDrawable(ContextCompat.getDrawable(Statified.myActivity!!, R.drawable.favorite_on))
        } else {
            Statified.fab?.setImageDrawable(ContextCompat.getDrawable(Statified.myActivity!!, R.drawable.favorite_off))
        }
    }

    fun bindShakeListener() {
        Statified.mSensorListner = object : SensorEventListener {
            override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {

            }

            override fun onSensorChanged(event: SensorEvent) {
                val x = event.values[0]
                val y = event.values[1]
                val z = event.values[2]

                mAccelerationLast = mAccelerationCurrent
                mAccelerationCurrent = Math.sqrt(((x * x + y * y + z * z).toDouble())).toFloat()

                val delta = mAccelerationCurrent - mAccelerationLast

                mAcceleration = mAcceleration * 0.9f + delta

                if (mAcceleration > 12) {
                    val prefs = Statified.myActivity?.getSharedPreferences(Statified.MY_PREFS_NAME, Context.MODE_PRIVATE)
                    val isAllowed = prefs?.getBoolean("feature", false)

                    if (isAllowed as Boolean) {
                        Staticated.playNext(Statified.playNextNormal)
                    }
                }
            }

        }
    }

}

